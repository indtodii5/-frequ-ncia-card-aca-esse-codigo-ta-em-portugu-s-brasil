#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <SparkFun_MAX3010x.h>
#include <Adafruit_AHTX0.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
#define BUTTON_PIN 0

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
MAX30105 particleSensor;
Adafruit_AHTX0 aht;

bool displayOn = false;
unsigned long lastDebounceTime = 0;
unsigned long debounceDelay = 50;

// Variáveis para frequência cardíaca e SpO2
uint32_t irBuffer[100]; // Infrared LED sensor data
uint32_t redBuffer[100]; // Red LED sensor data
int32_t bufferLength; // Data length
int32_t spo2; // SPO2 value
int8_t validSPO2; // Indicator to show if the SPO2 calculation is valid
int32_t heartRate; // Heart rate value
int8_t validHeartRate; // Indicator to show if the heart rate calculation is valid

void setup() {
  pinMode(BUTTON_PIN, INPUT_PULLUP);
  Serial.begin(115200);
  Wire.begin();

  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("SSD1306 allocation failed"));
    for (;;);
  }
  
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);

  if (!particleSensor.begin(Wire, I2C_SPEED_FAST)) {
    Serial.println(F("MAX30105 was not found. Please check wiring/power."));
    for (;;);
  }
  
  particleSensor.setup(); // Configure sensor with default settings
  
  if (!aht.begin()) {
    Serial.println("Could not find AHT? Check wiring");
    while (1) delay(10);
  }
}

void loop() {
  // Verifica o estado do botão para ligar/desligar o display
  int buttonState = digitalRead(BUTTON_PIN);
  if (buttonState == LOW && (millis() - lastDebounceTime) > debounceDelay) {
    displayOn = !displayOn;
    lastDebounceTime = millis();
  }

  if (displayOn) {
    // Leitura dos dados do sensor de frequência cardíaca
    bufferLength = 100;
    for (int i = 0; i < bufferLength; i++) {
      while (!particleSensor.available()) delay(10);
      redBuffer[i] = particleSensor.getRed();
      irBuffer[i] = particleSensor.getIR();
      particleSensor.nextSample();
    }
    
    // Calculo do SpO2 e frequência cardíaca
    maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);

    // Leitura dos dados de temperatura e umidade
    sensors_event_t humidity, temp;
    aht.getEvent(&humidity, &temp);

    // Atualização do display
    display.clearDisplay();
    display.setCursor(0, 0);
    display.print("HR: ");
    display.print(validHeartRate ? heartRate : 0);
    display.print(" bpm");
    
    display.setCursor(0, 20);
    display.print("Temp: ");
    display.print(temp.temperature);
    display.print(" C");

    display.setCursor(0, 40);
    display.print("SpO2: ");
    display.print(validSPO2 ? spo2 : 0);
    display.print(" %");

    display.display();
  } else {
    display.clearDisplay();
    display.display();
  }

  delay(1000); // Atualiza a cada segundo
}
